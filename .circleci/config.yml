version: 2.1
orbs:
  docker: circleci/docker@2.0.1
jobs:
  test:
    resource_class: small
    docker:
      - image: node:16.13.1
        environment:
          APP_ENV: test
          NODE_ENV: test
          ROOT_DIR: $CIRCLE_WORKING_DIRECTORY
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-lock-{{ checksum "yarn.lock" }}
            - yarn-lock-
      - run: yarn install --cache-folder ~/.cache/yarn
      - save_cache:
          key: yarn-lock-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
            - ~/.cache/yarn
      - run:
          name: Setup Code Climate test-reporter
          command: |
            # download test reporter as a static binary
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Run Tests
          command: |
            ./cc-test-reporter before-build
            yarn jest --ci --runInBand --reporters=default --reporters=jest-junit
            ./cc-test-reporter after-build --coverage-input-type lcov --exit-code "$?"
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
      - store_test_results:
          path: ./reports/junit/
      - store_artifacts:
          path: ./reports/junit
  lint-docker:
    resource_class: small
    executor: docker/hadolint
    steps:
      - checkout
      - docker/hadolint:
          dockerfiles: 'Dev.dockerfile:Prod.dockerfile'
  build:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - docker/build:
          dockerfile: Prod.dockerfile
          image: bnsfly/audiobook-catalog
          tag: 'git-<< pipeline.git.revision >>'
  build-and-publish:
    docker:
      - image: circleci/python:3.9
        auth:
          username: bnsfly
          password: $DOCKER_ACCESS_TOKEN
    resource_class: small
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - run: echo << pipeline.git.tag >>
      - docker/build:
          dockerfile: Prod.dockerfile
          image: bnsfly/audiobook-catalog
          tag: '<< pipeline.git.tag >>,latest'
      - docker/push:
          image: bnsfly/audiobook-catalog
          tag: '<< pipeline.git.tag >>,latest'

workflows:
  test-and-build:
    jobs:
      - test:
          filters:
            branches:
              ignore: main
      - lint-docker:
          filters:
            branches:
              ignore: main
      - build:
          requires:
            - lint-docker
  test-and-publish:
    jobs:
      - test:
          filters:
            branches:
              only: main
            tags:
              only: /^v.*/
      - lint-docker:
          filters:
            branches:
              only: main
            tags:
              only: /^v.*/
      - build-and-publish:
          requires:
            - lint-docker
